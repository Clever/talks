Interfaces will Save the Future
Case Study: Sphinx Rate Limiter

21 Jan 2015


Mohit Gupta & Alex Zylman
@mohitgupta
@amzylman

Clever
https://clever.com
https://github.com/Clever


* Introductions
# short introductions: name and position + 2 line summary of Clever


* But what is Sphinx?
- HTTP rate limiter
- Based on leakybucket algorithm (supporting both Redis and in-memory stores)
- Supports matching on request headers and IP address
- Transparent limiting through X-Rate-Limit headers
- Low request latencies (~15 ms)
.image logo.png _ 250


* Short Story: One Request in Sphinx Land

* Defining a Rate Limit
.code request-in-sphinx/config.yml

* Incoming Request
.code request-in-sphinx/request.md

* Calculating Rate Limit
.code request-in-sphinx/buckets.md

* Response to User
.code request-in-sphinx/response.md

* Benefits of ♥ interfaces ♥
- Improved collaboration
- Easier testing
- Swappable behaviors
- Plugins/components
- Bonus: 10 lines for live config reloads


* Improved collaboration
- "Who works on what" is a hard problem when dealing with dependencies between components
- With defined interfaces, you can use mock implementations
- Better for both testing and collaboration


* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter.go /START OMIT/,/END OMIT/


* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter_mock.go /START OMIT/,/END OMIT/


* Example: Collaborating using interfaces
.code rate_limiter_examples/rate_limiter_test.go /START OMIT/,/END OMIT/


* Easier testing
- Write tests once, against an interface, re-use for all implementations
- Keeps implementations more reliable
# LeakyBucket interface and how all implementations are tested through it.


* Example: Redis vs in-memory implementations for LeakyBucket
.code interface_tests/leakybucket.go /START OMIT/,/END OMIT/


* Example: Redis vs in-memory implementations for LeakyBucket
.code interface_tests/leakybucket_test.go /START OMIT/,/END OMIT/


* Example: Redis vs in-memory implementations for LeakyBucket
Tests for the memory implementation:

.code interface_tests/memory_tests.go /START OMIT/,/END OMIT/
Tests for the redis implementation:

.code interface_tests/redis_tests.go /START OMIT/,/END OMIT/


* Swappable behaviors
.code http_limiter_examples/constructors.go /START OMIT/,/END OMIT/


* [Mohit] Plugins
# MatcherFactory


* Bonus: Adding dynamic configuration reload
.code livereload_diff/diff


# If time:
* [Alex?] Benchmarking
