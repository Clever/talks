Interfaces will Save the Future
Case Study: Sphinx Rate Limiter

21 Jan 2015

Mohit Gupta & Alex Zylman
@mohitgupta
@amzylman

Clever
https://clever.com
https://github.com/Clever


* What is Sphinx?
- HTTP rate limiter
- Based on leakybucket algorithm (supporting both Redis and in-memory stores)
- Supports matching on request headers and IP address
- Transparent limiting through X-Rate-Limit headers
- Low request latencies (~15 ms)
.image logo.png _ 250

* A Request in Sphinx Land

* A Request in Sphinx Land

Defining a Limit:

- Maximum allowed requests over an interval
- IP, Path or Header based matching for applying a limit
- IP or Header based limits. eg. apply limit per ip, or apply limit per user

* A Request in Sphinx Land

Enforcing a Limit:

- Match incoming request to limit
- Create key based on request metadata
- Increment counter and check if it is below the limit
- Proxy if below limit
- Add Headers and respond

* ♥ interfaces ♥

* ♥ interfaces in go ♥

- Interfaces are _sets_ _of_ _methods_
- Any struct with the _set_ _of_ _methods_ _implements_ the interface

.code interface_examples/limit-interface.go /START OMIT/,/END OMIT/
.code interface_examples/iplimitkey.go /START OMIT/,/END OMIT/

* ♥ interfaces ♥
- Improved collaboration
- Easier testing
- Swappable behaviors
- Plugins/components


* Collaboration through Interfaces

* Collaboration through Interfaces

- "Who works on what" is a hard problem
- With defined interfaces, you can use mock implementations
- More flexibility on deciding what to work on


* Collaboration through Interfaces: Example
.code rate_limiter_examples/rate_limiter.go /START OMIT/,/END OMIT/


* Collaboration through Interfaces: Example
.code rate_limiter_examples/rate_limiter_mock.go /START OMIT/,/END OMIT/


* Collaboration through Interfaces: Example
.code rate_limiter_examples/rate_limiter_test.go /START OMIT/,/END OMIT/


* Easier Testing

* Easier Testing

- Write tests against the interface
- Each implementation can reuse the tests
- Keeps implementations more reliable
- Adding a test case for the interface will ensure implementations are bug-free


* Easier Testing: Example
.code interface_tests/leakybucket.go /START OMIT/,/END OMIT/


* Easier Testing: Example
.code interface_tests/leakybucket_test.go /START OMIT/,/END OMIT/


* Easier Testing: Example
Tests for the memory implementation:

.code interface_tests/memory_tests.go /START OMIT/,/END OMIT/

Tests for the redis implementation:

.code interface_tests/redis_tests.go /START OMIT/,/END OMIT/

* Swappable Behaviors

* Swappable Behaviors

- Allow for different behaviors easily
- There is more confidence since different behaviors share common tests

.code http_limiter_examples/constructors.go /START OMIT/,/END OMIT/


# * [Mohit] Plugins
# MatcherFactory


* Bonus: Adding dynamic configuration reload
.code livereload_diff/diff


# If time:
# * [Alex?] Benchmarking
