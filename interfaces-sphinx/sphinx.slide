Interfaces Will Save the Future
Case Study: Sphinx Rate Limiter

21 Jan 2015

Mohit Gupta & Alex Zylman
@mohitgupta
@amzylman

Clever
https://clever.com
https://github.com/Clever


* What is Sphinx?
- HTTP rate limiter
- Based on leakybucket algorithm (supporting both Redis and in-memory stores)
- Supports matching on request headers and IP address
- Transparent limiting through X-Rate-Limit headers
- Low request latencies (~15 ms)
.image logo.png _ 250

* A request in Sphinx

* A request in Sphinx

Defining a Limit:

- Maximum allowed requests over an interval
- IP, Path or Header based matching for applying a limit
- IP or Header based limits. eg. apply limit per ip, or apply limit per user

* A request in Sphinx

Enforcing a Limit:

- Match incoming request to limit
- Create key based on request metadata
- Increment counter and check if it is below the limit
- Proxy if below limit
- Add Headers and respond

* ♥ interfaces ♥

* ♥ interfaces in Go ♥

- Interfaces are _sets_ _of_ _methods_
- Any struct with the _set_ _of_ _methods_ _implements_ the interface

.code interface_examples/limit-interface.go /START OMIT/,/END OMIT/
.code interface_examples/iplimitkey.go /START OMIT/,/END OMIT/

* ♥ interfaces in Go♥
- Improved collaboration
- Easier testing
- Swappable behaviors

* Collaboration through interfaces

* Collaboration through interfaces

- "Who works on what" is a hard problem
- Start working on different parts simultaneously
- More flexibility on deciding what to work on


* Collaboration through interfaces: Example

- With defined interfaces, you can use mock implementations

.code rate_limiter_examples/rate_limiter.go /START OMIT/,/END OMIT/


* Collaboration through interfaces: Example
.code rate_limiter_examples/rate_limiter_mock.go /START OMIT/,/END OMIT/


* Collaboration through interfaces: Example
.code rate_limiter_examples/rate_limiter_test.go /START OMIT/,/END OMIT/


* Easier testing

* Easier testing

- Keep different implementations in sync
- Ensure that bugs found in an implementation are easily applied to all


* Easier testing: Example

- Write tests against the interface so each implementation can reuse them
- A test case for a bug will ensure all implementations are bug-free

.code interface_tests/leakybucket.go /START OMIT/,/END OMIT/


* Easier testing: Example
.code interface_tests/leakybucket_test.go /START OMIT/,/END OMIT/


* Easier testing: Example
Tests for the memory implementation:

.code interface_tests/memory_tests.go /START OMIT/,/END OMIT/

Tests for the redis implementation:

.code interface_tests/redis_tests.go /START OMIT/,/END OMIT/

* Swappable behaviors

* Swappable behaviors

- Allow for different behaviors easily
- There is more confidence since different behaviors share common tests

  type Handler interface {
    ServeHTTP(ResponseWriter, *Request)
  }

.code http_limiter_examples/constructors.go /START OMIT/,/END OMIT/

* Plugins / components

- Easily add Matchers and Keys without diving into the whole system
- Each component responsible for it's own configuration

* Plugins / components: Example

.code plugins/matcher.go
.code plugins/path_matcher.go


* Bonus

* Bonus: Adding dynamic configuration reload
.code livereload_diff/diff


# If time:
# * [Alex?] Benchmarking
